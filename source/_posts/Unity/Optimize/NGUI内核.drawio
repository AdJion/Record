<mxfile host="53835680-8acd-430a-a1bc-49896b550070" modified="2020-07-16T09:54:15.809Z" agent="5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Code/1.47.1 Chrome/78.0.3904.130 Electron/7.3.2 Safari/537.36" etag="TnlUfRrEISYxjgWD1gqF" version="13.1.3">
    <diagram id="6hGFLwfOUW9BJ-s0fimq" name="Page-1">
        <mxGraphModel dx="2635" dy="1984" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
            <root>
                <mxCell id="0"/>
                <mxCell id="1" parent="0"/>
                <mxCell id="2" value="BetterList是System.Collections.Generic的改进版本.优点是:在 Clear()不会释放缓冲区列表,GC 更少,添加和删除比 List 更快.缺点是排序比 List 很差." style="rounded=1;whiteSpace=wrap;html=1;fontSize=18;" parent="1" vertex="1">
                    <mxGeometry x="150" y="190" width="300" height="140" as="geometry"/>
                </mxCell>
                <mxCell id="24" value="UIRoot 管理屏幕的缩放比例" style="rounded=1;whiteSpace=wrap;html=1;fontSize=18;" parent="1" vertex="1">
                    <mxGeometry x="-1310" y="-110" width="280" height="80" as="geometry"/>
                </mxCell>
                <mxCell id="28" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="26" target="27">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="26" value="UIRect确定一个 UI 以矩形的方式进行绘制" style="rounded=1;whiteSpace=wrap;html=1;fontSize=18;" vertex="1" parent="1">
                    <mxGeometry x="-560" y="-100" width="280" height="80" as="geometry"/>
                </mxCell>
                <mxCell id="33" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="27" target="32">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="27" value="UIPanel,收集排序以及更新 UIWidget,生成几何形状生成 Mesh&lt;br&gt;Mesh 将数据输送给 MeshRenderer 然后渲染图元.一个 MeshRenderer 经过相机会知道屏幕上,可以认为是一个 DrawCall(渲染数据,渲染状态,shader 等都有可能增加或者减少 DrawCall)" style="rounded=1;whiteSpace=wrap;html=1;fontSize=18;" vertex="1" parent="1">
                    <mxGeometry x="-580" y="10" width="320" height="160" as="geometry"/>
                </mxCell>
                <mxCell id="37" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="32" target="36">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="47" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="32" target="46">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="32" value="UIWidget,容器单位,更新数据,保存几何数据" style="rounded=1;whiteSpace=wrap;html=1;fontSize=18;" vertex="1" parent="1">
                    <mxGeometry x="-560" y="220" width="280" height="80" as="geometry"/>
                </mxCell>
                <mxCell id="46" value="UI 等等" style="rounded=1;whiteSpace=wrap;html=1;fontSize=18;" vertex="1" parent="1">
                    <mxGeometry x="-560" y="380" width="280" height="80" as="geometry"/>
                </mxCell>
                <mxCell id="38" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="36" target="2">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="36" value="UIGeometry 缓存UIWidget 的几何数据,提供给渲染层,顶点,颜色,UV 等数据" style="rounded=1;whiteSpace=wrap;html=1;fontSize=18;" vertex="1" parent="1">
                    <mxGeometry x="-200" y="220" width="280" height="80" as="geometry"/>
                </mxCell>
                <mxCell id="49" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="29" target="48">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="29" value="UICamera管理整个事件系统,所有事件都是从这个类发出,然后到某个脚本里面的,事件系统&lt;br&gt;每一次帧更新的时候,检测当前 Input 的各种输入情况,对屏幕做响应的投射(Raycast),获取相应的需要获取事件的 Collider,并将事件分发到其 GO 挂载的脚本上面" style="rounded=1;whiteSpace=wrap;html=1;fontSize=18;" vertex="1" parent="1">
                    <mxGeometry x="-1035" y="-120" width="410" height="160" as="geometry"/>
                </mxCell>
                <mxCell id="48" value="交互事件 EventDelegate 等等" style="rounded=1;whiteSpace=wrap;html=1;fontSize=18;" vertex="1" parent="1">
                    <mxGeometry x="-1035" y="120" width="410" height="160" as="geometry"/>
                </mxCell>
                <mxCell id="30" value="NGUIAtlas 图集一系列" style="rounded=1;whiteSpace=wrap;html=1;fontSize=18;" vertex="1" parent="1">
                    <mxGeometry x="-1380.5" y="-120" width="280" height="80" as="geometry"/>
                </mxCell>
                <mxCell id="31" value="NGUIFont 字体一系列" style="rounded=1;whiteSpace=wrap;html=1;fontSize=18;" vertex="1" parent="1">
                    <mxGeometry x="-1380" y="30" width="280" height="80" as="geometry"/>
                </mxCell>
                <mxCell id="35" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" edge="1" parent="1" source="34" target="26">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="34" value="NGUI 渲染系列" style="rounded=1;whiteSpace=wrap;html=1;fontSize=18;" vertex="1" parent="1">
                    <mxGeometry x="-560" y="-270" width="280" height="80" as="geometry"/>
                </mxCell>
                <mxCell id="39" value="&lt;div&gt;&lt;span style=&quot;font-size: 18px&quot;&gt;一个 UIPanel下面有多个 DrawCall,让相同材质/纹理的 UI 的 Depth 相近,不同材质/纹理的 UI的 Depth 隔开,会合批成最小的 DrawCall.NGUI 的 Shader 都默认关闭了动态合批,即在 shader 中设置&quot;DisableBatching&quot;=&quot;true&quot;.因此如果在 NGUI 使用自定义的 Shader 也要遵守这个策略.要减少 DrawCall,也要减少 Mesh 的数据量,也要减少渲染器切换渲染状态所带来的的消耗.这个地方类似于动态合批技术,将不同的 UIWidget 合批成一个 DrawCall,将Mesh 数据传入渲染器进行渲染.&lt;/span&gt;&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
                    <mxGeometry x="-240" y="20" width="700" height="140" as="geometry"/>
                </mxCell>
            </root>
        </mxGraphModel>
    </diagram>
</mxfile>